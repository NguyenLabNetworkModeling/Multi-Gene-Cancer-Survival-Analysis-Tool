"""Functions relating to interacting with the cBioPortal REST API.

The cBioPortal REST API is specified using OpenAPI and is in beta as of
30/11/2020. Documentation for the API is available at
https://docs.cbioportal.org/ under the section "Web API and Clients."

This module contains functions which abstract over this API for usage
relevant to analysis. The API interface is guided largely by a generated
client using `bravado`.

"""

import pandas as pd
from bravado.client import SwaggerClient
from collections import defaultdict
from typing import List
from sqlalchemy import create_engine


class Api(object):
    """Initialises the bravado client and provides methods for API access.

    Some preprocessed data is kept locally on the server and does not require
    access to the remote client.

    Attributes:
        client (SwaggerClient): remote cBioPortal client generated by bravado.
        clinical_attributes (List[str]): clinical attribute IDs relevant for survival analysis.
        engine: SQLAlchemy engine into local SQLite database.
    """

    def __init__(self):
        self.client = SwaggerClient.from_url("https://www.cbioportal.org/api/api-docs")
        self.engine = create_engine("sqlite:///../data/data.db")
        self.clinical_attributes = [
            "OS_STATUS",
            "OS_MONTHS",
            "DFS_STATUS",
            "DFS_MONTHS",
        ]

    def _get_remote_studies(self):
        "Get all available studies from the remote client."
        results = self.client.Studies.getAllStudiesUsingGET().result()
        return results

    def _get_remote_clinical_data(self, study_id: str):
        "Get selected clinical data (relevant for survival analysis) for a given study."
        results = self.client.Clinical_Data.fetchAllClinicalDataInStudyUsingPOST(
            studyId=study_id,
            clinicalDataSingleStudyFilter={"attributeIds": self.clinical_attributes},
            clinicalDataType="PATIENT",
        ).result()
        return results

    def _preprocess_remote_clinical_data(self, results):
        "Preprocesses the retrieved clinical data into a pandas DataFrame with one row per patient."

        def to_int_if_outcome(attribute: str, value: str):
            "Convert a survival outcome value to a string, else return the value unchanged."
            if attribute == "OS_STATUS":
                if value == "0:LIVING":
                    return 0
                elif value == "1:DECEASED":
                    return 1
                else:
                    raise Exception(f"Unknown OS_STATUS value: {value}")
            elif attribute == "DFS_STATUS":
                if value == "0:DiseaseFree":
                    return 0
                elif (
                    value == "1:Recurred/Progressed"
                    or value == "1:Recurred"
                    or value == "1:Progressed"
                ):
                    return 1
                else:
                    raise Exception(f"Unknown DFS_STATUS value: {value}")
            else:
                return value

        grouped = defaultdict(dict)
        for res in results:
            new_value = to_int_if_outcome(res.clinicalAttributeId, res.value)
            grouped[res.uniquePatientKey][res.clinicalAttributeId.lower()] = new_value
        dataframe = pd.DataFrame(grouped).transpose()
        return dataframe

    def _get_remote_molecular_profiles(self, study_id: str):
        "Get all available molecular profiles for a study from the remote client."
        results = self.client.Molecular_Profiles.getAllMolecularProfilesInStudyUsingGET(
            studyId=study_id
        ).result()
        return results

    def _get_remote_molecular_data(self, entrez_ids: List[int], profile_id: str):
        "Get the available molecular data for a molecular profile from the remote client."
        results = self.client.Molecular_Data.fetchMolecularDataInMultipleMolecularProfilesUsingPOST(
            molecularDataMultipleStudyFilter={
                "entrezGeneIds": entrez_ids,
                "molecularProfileIds": [profile_id],
            }
        ).result()
        return results

    def _preprocess_remote_molecular_data(self, results):
        "Preprocess the remote molecular data results into a pandas DataFrame with one row per patient."
        grouped = defaultdict(dict)
        for res in results:
            grouped[res.uniquePatientKey][res.entrezGeneId] = res.value
        dataframe = pd.DataFrame(grouped).transpose()
        return dataframe

    def get_studies(self) -> List:
        """Gets studies from local validated studies and return as dict.

        Example output:

            [{
                'study_id': 'brca_tcga',
                'cancer_type_id': 'brca',
                'description': '...',
                'name': 'Breast Invasive Carcinoma (TCGA, Firehose Legacy)',
                'pmid': None,
                'short_name': 'Breast (TCGA)',
                'outcomes': [
                    {'study_id': 'brca_tcga', 'outcome_id': 'os', 'count': 1096},
                    {'study_id': 'brca_tcga', 'outcome_id': 'dfs', 'count': 1004}
                ],
                'molecular_profiles': [
                    {'study_id': 'brca_tcga',
                    'profile_id': 'brca_tcga_mrna',
                    'name': 'mRNA expression (microarray)',
                    'description': '...',
                    'datatype': 'CONTINUOUS',
                    'molecularAlterationType': 'MRNA_EXPRESSION'},
                    {'study_id': 'brca_tcga',
                    'profile_id': 'brca_tcga_rna_seq_v2_mrna',
                    'name': 'mRNA expression (RNA Seq V2 RSEM)',
                    'description': 'mRNA gene expression (RNA Seq V2 RSEM)',
                    'datatype': 'CONTINUOUS',
                    'molecularAlterationType': 'MRNA_EXPRESSION'}
                ]
            }]
        """
        studies = pd.read_sql("study", self.engine, index_col="index").to_dict(
            "records"
        )
        all_out = pd.read_sql("study_outcome", self.engine, index_col="index")
        all_pro = pd.read_sql("study_profile", self.engine, index_col="index")
        for study in studies:
            outcomes = all_out.loc[all_out["study_id"] == study["study_id"]].to_dict(
                "records"
            )
            profiles = all_pro.loc[all_pro["study_id"] == study["study_id"]].to_dict(
                "records"
            )
            study["outcomes"] = outcomes
            study["molecular_profiles"] = profiles
        return studies

    def get_clinical_data(self, study_id: str) -> pd.DataFrame:
        """Gets clinical data from locally stored clinical data and returns a dataframe indexed by patient key."""
        clinical = pd.read_sql(
            "select * from study_clinical_data where study_id = ?",
            self.engine,
            params=[study_id],
            index_col="index",
        )
        return clinical

    def get_molecular_data(
        self, entrez_ids: List[str], profile_id: str
    ) -> pd.DataFrame:
        """Gets molecular data from remote client and returns a dataframe indexed by patient key."""
        results = self._get_remote_molecular_data(entrez_ids, profile_id)
        return self._preprocess_remote_molecular_data(results)

    def get_gene(self, prefix: str) -> pd.DataFrame:
        """Get all genes with a HUGO ID with a given prefix."""
        genes = pd.read_sql(
            "select * from gene where hugo like ?", self.engine, params=[prefix + "%"]
        )
        return genes